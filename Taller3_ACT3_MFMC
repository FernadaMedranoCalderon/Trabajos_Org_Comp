section.data

msg_greater db "El número es mayor o igual a 10", 0xA ; Mensaje para cuando el número es mayor o igual a 10
len_msg_greater equ $ - msg_greater ; Longitud del mensaje

msg_lower db "El número es menor a 10", 0xA ; Mensaje para cuando el número es menor a 10
len_msg_lower equ $ - msg_lower ; Longitud del mensaje

msg_equal db "El número es igual a 10", 0xA ; Mensaje para cuando el número es igual a 10
len_msg_equal equ $ - msg_equal ; Longitud del mensaje

msg_not_valid db "El valor ingresado no es válido", 0xA ; Mensaje para cuando el valor no es válido
len_msg_not_valid equ $ - msg_not_valid ; Longitud del mensaje

section .bss

number resd 1 ; Reserva espacio en la memoria para almacenar un entero sin inicializar

section .text

global start

_start:

mov dword [number], 10 ; Asigna el valor 10 a la ubicación de memoria "number"

mov eax, dword [number] ; Carga el valor de "number" en el registro eax

cmp eax, 10 ; Compara el valor de eax con 10

je equal ; Si el valor es igual a 10, salta a la etiqueta "equal"

jg greater_than ; Si el valor es mayor que 10, salta a la etiqueta "greater_than"

; Si el valor es menor a 10, imprime el mensaje "El número es menor a 10"
mov eax, 4 ; Llamada al sistema para imprimir un mensaje
mov ebx, 1 ; Descriptor de archivo para STDOUT
mov ecx, msg_lower ; Dirección del mensaje
mov edx, len_msg_lower ; Longitud del mensaje
int 0x80 ; Llamada al sistema
jmp end_if_else ; Salta al final del bloque if-else

greater_than:

mov eax, 4 ; Llamada al sistema para imprimir un mensaje
mov ebx, 1 ; Descriptor de archivo para STDOUT
mov ecx, msg_greater ; Dirección del mensaje
mov edx, len_msg_greater ; Longitud del mensaje
int 0x80 ; Llamada al sistema
jmp end_if_else ; Salta al final del bloque if-else

equal:

mov eax, 4 ; Llamada al sistema para imprimir un mensaje
mov ebx, 1 ; Descriptor de archivo para STDOUT
mov ecx, msg_equal ; Dirección del mensaje
mov edx, len_msg_equal ; Longitud del mensaje
int 0x80 ; Llamada al sistema
jmp end_if_else ; Salta al final del bloque if-else

end_if_else:

mov eax, 1 ; Código de salida del programa
xor ebx, ebx ; Limpiar ebx
int 0x80 ; Llamada al sistema para salir del programa
